#Dash
import dash
from dash.dependencies import Input, Output
from dash import dash_table
from dash.dash_table.Format import Group
from dash import dcc
from dash import HTML
import plotly.express as px
import pandas as pd

#Import the csv file

#Create an ID column to create your user interface
df['id'] = df['iso_alpha3']
df.set_index('id', inplace=True, drop=False)
print(df.columns)

#App layout
app = dash.Dash(__name__, prevent_initial_callbacks=True)

#Sorting operators function
app.layout = html.Div([
    dash_table.DataTable(
        id='datatable-interactivity',
        columns=[
            {"name": i, "id": i, "deletable": True, "selectable": True, "hideable": True}
            if i == "iso_alpha3" or i == "year" or i == "id"
            else {"name": i, "id": i, "deletable": True, "selectable": True}
            for i in df.columns
        ]
    )
])
data=df.to_dict('records'),
editable=True, 
filter_action="native",
 sort_action="native",
sort_mode="single", 
column_selectable="multi",
row_selectable="multi", 
row_deletable=True, 
selected_columns=[],
selected_rows=[],
page_action="native",
page_current=0, 
page_size=6, 
style_cell={'minWidth': 95, 'maxWidth': 95, 'width': 95
        }, 
style_cell_conditional=[  {
                'if': {'column_id': c},
                'textAlign': 'left'
            } for c in ['country', 'iso_alpha3']
        ],
style_data={'whiteSpace': 'normal',
            'height': 'auto'
        }
html.Div([
    html.Br(),
    html.Br(),
    html.Div(id='bar-container'),
    html.Div(id='choromap-container')
])

#To create Barchart
@app.callback(
    Output(component_id='bar-container', component_property='children'),
    [Input(component_id='datatable-interactivity', component_property="derived_virtual_data"),
     Input(component_id='datatable-interactivity', component_property='derived_virtual_selected_rows'),
     Input(component_id='datatable-interactivity', component_property='derived_virtual_selected_row_ids'),
     Input(component_id='datatable-interactivity', component_property='selected_rows'),
     Input(component_id='datatable-interactivity', component_property='derived_virtual_indices'),
     Input(component_id='datatable-interactivity', component_property='derived_virtual_row_ids'),
     Input(component_id='datatable-interactivity', component_property='active_cell'),
     Input(component_id='datatable-interactivity', component_property='selected_cells')]
)
def update_bar(all_rows_data, slctd_row_indices, slct_rows_names, slctd_rows,
               order_of_rows_indices, order_of_rows_names, actv_cell, slctd_cell):
    print('***************************************************************************')
    print('Data across all pages pre or post filtering: {}'.format(all_rows_data))
    print('---------------------------------------------')
    print("Indices of selected rows if part of table after filtering:{}".format(slctd_row_indices))
    print("Names of selected rows if part of table after filtering: {}".format(slct_rows_names))
    print("Indices of selected rows regardless of filtering results: {}".format(slctd_rows))
    print('---------------------------------------------')
    print("Indices of all rows pre or post filtering: {}".format(order_of_rows_indices))
    print("Names of all rows pre or post filtering: {}".format(order_of_rows_names))
    print("---------------------------------------------")
    print("Complete data of active cell: {}".format(actv_cell))
    print("Complete data of all selected cells: {}".format(slctd_cell))
def update_bar(all_rows_data, slctd_row_indices):
    df = pd.DataFrame(all_rows_data)
colors = ['#7FDBFF' if i in slctd_row_indices else '#0074D9'          #This is where I am experiencing error
              for i in range(len(df))]


